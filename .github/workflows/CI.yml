# --- START OF FILE .github/workflows/CI.yml (ADAPTED FOR NPM) ---
name: CI
env:
  DEBUG: napi:*
  APP_NAME: rustiohook
  MACOSX_DEPLOYMENT_TARGET: '10.13'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # Windows
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          # macOS (Intel)
          - host: macos-latest
            target: x86_64-apple-darwin
          # macOS (Apple Silicon M1/M2/M3)
          - host: macos-latest
            target: aarch64-apple-darwin
          # Linux (стандартный)
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian

    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: npm # Используем кэш npm

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Install dependencies
        run: npm install

      # --- Сборка для Windows и macOS ---
      - name: Build
        # Наша команда сборки. Мы используем --release для оптимизации.
        run: npm run build 
        if: ${{ !matrix.settings.docker }}
        shell: bash

      # --- Сборка для Linux (внутри Docker) ---
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: |
            npm install
            npm run build

      # --- Загрузка артефакта ---
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          # Важно! Мы ищем .node файл в корне, куда его копирует наш скрипт сборки
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  # --- Тестирование пропускаем, так как наш тест ручной ---
  # --- Вы можете добавить сюда автоматические тесты позже ---

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build # Зависит только от успешной сборки
    if: startsWith(github.ref, 'refs/tags/') # Запускать только при создании нового тега (релиза)
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts
        run: npm run artifacts # Используем скрипт napi-rs для перемещения

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish to NPM
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # Этот секрет нужно будет добавить в настройки репозитория
# --- END OF FILE .github/workflows/CI.yml (ADAPTED FOR NPM) ---